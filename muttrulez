#!/usr/bin/perl
use strict;
use warnings;
use Net::IMAP::Client;
use Encode;
use MIME::Base64;
use YAML::XS qw(Dump Load LoadFile);
use File::Temp qw(tempdir);
use List::Util qw(max);
use Getopt::Long;

my $opt = {};
GetOptions($opt, 'unit|u', 'help|h');

my $home = (getpwuid $<)[-2];
my $imap = get_imap();
my $cfgfile = shift // "$home/.muttrulez";
my $rulez = LoadFile $cfgfile;

if ($opt->{unit}) {
    print imap_date('22d'), "\n";
    print imap_date('7m'), "\n";
    print imap_date('3y'), "\n";
    my %sums = search($rulez->[0]{search});
    my $max = max keys %sums;
    print Dump { $max => $sums{$max} };
    print Dump [ $imap->folders ];
    exit;
}

# Default steps in each rule to exclude emails already seen by muttrulez
my @default_steps = ({
    action => 'reject',
    type => 'flag',
    flag => '$Muttrulez',
});

chdir tempdir(CLEANUP => 1);

my %seen;
RULE: foreach my $rule (@$rulez) {
    next unless ref $rule eq 'HASH';
    print "Running $rule->{name}\n";
    ref $rule->{search} eq 'HASH' or print 'search key missing' and next;
    my %sums = search($rule->{search});
    @seen{keys %sums} = values %sums;
    ID: foreach my $id (keys %sums) {
        print Dump $sums{$id};
        my @ret;
        STEP: foreach my $step (@default_steps, @{$rule->{steps}}) {
            @ret = run_step_on_id($step, $id, $sums{$id}, @ret);
            unless (@ret) {
                delete $sums{$id};
                next ID;
            }
            next RULE unless %sums;
        }
    }
}

# Indicate muttrulez has seen all specified emails
$imap->add_flags([ keys %seen ], [ '$Muttrulez' ]);
$imap->expunge;

sub search {
    my $terms = shift;
    foreach (keys %$terms) {
        next unless /^SENT|BEFORE$|SINCE$/;
        $terms->{$_} = imap_date($terms->{$_});
    }
    my $ids = $imap->search($terms);
    my $sums = $imap->get_summaries($ids);
    my %sums;
    @sums{@$ids} = map { [ read_summary($_) ] } @$sums;
    return %sums;
}

sub imap_date {
    my $date = shift;
    print "date in: $date\n";
    return $date if $date =~ /^\d{2}-[A_Z][a-z]{2}-\d{4}$/;
    die "Invalid delta date $date" unless $date =~ /^\d+[dmy]$/;

    my @monnames = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
    my ($s, $min, $h, $mday, $mon, $year) = localtime;
    $year += 1900;

    if ($date =~ /^(\d+)d/) {
        my $dday = $1;
        my $t = time - 3600 * 24 * $dday;
        ($s, $min, $h, $mday, $mon, $year) = localtime $t;
        $year += 1900;
    } elsif ($date =~ /^(\d+)m/) {
        $mon -= $1;
        if ($mon < 0) {
            use integer;
            $year -= $mon / 12 + 1;
            $mon %= 12;
        }
    } elsif ($date =~ /^(\d+)y/) {
        $year -= $1;
    }
    print "date out: $mday-$monnames[$mon]-$year\n";
    return "$mday-$monnames[$mon]-$year";
}

sub run_step_on_id {
    my ($step, $id, $sum, @prev) = @_;
    my %step_map = (
        flag => \&step_flag,
        attachment => \&step_attachment,
        pipegrep => \&step_pipegrep,
        email => \&step_email,
        add_flags =>\&step_add_flags,
        del_flags =>\&step_del_flags,
        copy => \&step_copy,
        move => \&step_move,
        delete => \&step_delete,
    );
    print "Running step $step->{type} on $id\n";
    my @ret = $step_map{$step->{type}}($step, $id, $sum, @prev);
    $step->{action} //= 'reject';
    my @action =
        $step->{action} eq 'accept' ? @ret :
        @ret                        ? () :
                                      1;
    print Dump { prev => \@prev, ret => \@ret, return => \@action };
    return @action;
}

sub step_flag {
    my ($step, $id, $sum, @prev) = @_;
    return grep { $_ eq $step->{flag} } @{$sum->[0]{flags}};
}

sub step_attachment {
    my ($step, $id, $sum, @prev) = @_;
    my $mime = $step->{mime};
    my $ext = (split '/', $mime)[-1];
    my @parts = grep { $_->{type} eq $mime } @$sum;
    my $savedir = savedir($step->{save});
    my @names;
    PART: foreach my $part (@parts) {
        my $name = $part->{name} // "$id.$part->{part_id}.$ext";
        $name = "${savedir}$name";
        push @names, $name;
        my $body_raw = $imap->get_part_body($id, $part->{part_id});
        my $body = $part->{encoding} eq 'base64'
            ? decode_base64($$body_raw)
            : $$body_raw;
        print "Saving $name\n";
        open my $pdf, ">", $name or die $!;
        print $pdf $body;
        close $pdf;
    }
    return @names;
}

sub savedir {
    my $savedir = shift;
    return '' unless defined $savedir;
    return '' if $savedir =~ /\*/;
    $savedir =~ s|^~/|$home/|;
    $savedir =~ s|/$||;
    return '' unless -d $savedir;
    $savedir .= '/';
    return $savedir;
}

sub step_pipegrep {
    my ($step, $id, $sum, @prev) = @_;
    my %args = map { $_ => 1 } @prev;
    ARG: foreach my $arg (keys %args) {
        my $cmd = $step->{cmd};
        $cmd =~ s/\b_\b/$arg/;
        open my $fd, "$cmd |" or die $!;
        my $txt;
        $txt .= $_ while <$fd>;
        delete $args{$arg} unless $txt =~ /$step->{regex}/;
    }
    return keys %args;
}

sub step_email {
    my ($step, $id, $sum, @prev) = @_;
    my $subj = $step->{subject} // $sum->[0]{subject};
    my $cmd = "mutt -s '$subj'";
    if ($step->{attach} eq '_') {
        my @files = map { "'$_'" } @prev;
        $cmd .= " -a @files --";
    } elsif (ref $step->{attach} eq 'ARRAY') {
        my @files = map { "'$_'" } @{$step->{attach}};
        $cmd .= " -a @files --";
    } elsif (! ref $step->{attach}) {
        $cmd .= " -a '$step->{attach}' --";
    }
    $cmd .= " $step->{to}";
    open my $mutt, "| $cmd" or die $!;
    binmode $mutt, ":utf8";
    print $mutt $step->{text};
    close $mutt;
    return not $?;
}

sub step_add_flags {
    my ($step, $id, $sum, @prev) = @_;
    $imap->add_flags($id, $step->{flag});
}

sub step_del_flags {
    my ($step, $id, $sum, @prev) = @_;
    $imap->del_flags($id, $step->{flag});
}

sub step_copy {
    my ($step, $id, $sum, @prev) = @_;
    $imap->copy($id, $step->{folder});
}

sub step_move {
    my ($step, $id, $sum, @prev) = @_;
    $imap->copy($id, $step->{folder});
    $imap->add_flags($id, '\\Deleted');
}

sub step_delete {
    my ($step, $id, $sum, @prev) = @_;
    $imap->add_flags($id, '\\Deleted');
}

# Create logged on IMAP object from config file
sub get_imap {
    my $cfg = read_mutt();
    my $imap = Net::IMAP::Client->new(
        server => $cfg->{imap_server},
        user => $cfg->{imap_user},
        pass => $cfg->{imap_pass},
        ssl => $cfg->{imap_ssl},
        ssl_verify_peer => 0,
    );
    $imap->login or die $imap->last_error;
    $imap->select($cfg->{imap_folder});
    return $imap;
}

# Read config from user's .muttrc
sub read_mutt {
    open my $muttrc, "$home/.muttrc" or die $!;
    my %mutt = map { /^\s*set\s+(\w+)\s*=\s*"?([^"]+)"?\s*\n$/ } <$muttrc>;

    my (undef, $protocol, $server, $folder) =
        $mutt{folder} =~ m|^((imap.)://)?([^/]+)/(\w+)|;
    my $ssl = ($protocol // '') eq 'https' || $mutt{ssl_starttls};
    return {
        imap_server => $server,
        imap_folder => $folder,
        imap_record => $mutt{record},
        imap_user => $mutt{imap_user},
        imap_pass => $mutt{imap_pass},
        imap_ssl => $ssl,
        smtp_url => $mutt{smtp_url},
        smtp_pass => $mutt{smtp_pass},
    }
}

# Convert an email summary to a list of parts with fields below if applicable:
# from, to, cc, subject, date, type, flags, part_id, name.
# One element always exists and includes addressing.
# Other parts returned only in case of a multipart email.
# Returns main element only in scalar context.
sub read_summary {
    my $sum = shift;
    my $self;
    $self->{part_id} = $sum->{part_id} if defined $sum->{part_id};
    $self->{type} =
        defined $sum->{type}           ? "$sum->{type}/$sum->{subtype}"     :
        defined $sum->{multipart_type} ? "multipart/$sum->{multipart_type}" :
                                         undef
        or delete $self->{type};
    $sum->{from} and $self->{from} = [ map { $_->email } @{$sum->{from}} ];
    $sum->{to} and $self->{to} = [ map { $_->email } @{$sum->{to}} ];
    $sum->{cc} and $self->{cc} = [ map { $_->email } @{$sum->{cc}} ];
    $sum->{subject} and $self->{subject} = decode('MIME-Header',  $sum->{subject});
    $sum->{date} and $self->{date} = $sum->{date};
    $sum->{flags} and $self->{flags} = $sum->{flags};
    $sum->{parameters} and $sum->{parameters}{name} and
        $self->{name} = decode('MIME-Header', $sum->{parameters}{name});
    $sum->{transfer_encoding} and $self->{encoding} = $sum->{transfer_encoding};

    return $self unless wantarray;
    my @list = ($self);
    return @list unless ref $sum->{parts} eq 'ARRAY';

    push @list,  map { read_summary($_) } @{$sum->{parts}};
    return @list;
}
